# Default values for airflow.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

airflow:
  image:
    repository: gcr.io/eloquamart/airflow-k8s
    tag: 3.7.10
    pullPolicy: IfNotPresent

  imagePullSecrets: []
 
  nodeSelector: {}

  tolerations: []

  affinity: {}

nameOverride: ""
fullnameOverride: ""

auth:
  # Enabled or disables Google Authentication
  enabled: false
  # Must provide details for Google Authotication to work
  # if auth.enabled = true
  clientId:
  clientSecret: 
  callbackRoute: 
  allowedDomains: 


service:
  annotations: {}
  type: ClusterIP
  externalPort: 8080
  nodePort:
    http:

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/tls-acme: "true"
    # kubernetes.io/ingress.class: "nginx"
    # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  hosts:
  - host: charts-example.local
    paths: []


  tls: []

serviceAccount:
  create: true 
  name:

rbac:
  create: true

dagsPersistence:
  enabled: true
  storageClassName: standard
  capacity: 10Gi

logsPersistence:
  enabled: true
  storageClassName: standard
  capacity: 500Gi

# Airflow webserver
webserver:
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi


# Airflow scheduler
scheduler:
  resources:
    requests:
      cpu: 100m
      memory: 128Mi

# @param nfs - object - required
# This is NFS server for Airflow dags and plugins
nfs:
  image:
    repository: gcr.io/google_containers/volume-nfs
    tag: 0.8
    pullPolicy: IfNotPresent
  
  service:
    annotations: {}

  resources: {}
# @param sync - object - required
# This is gcs-syncd agent that pulls dags and plugins from a GCS bucket.
sync:
  image:
    repository: 
    tag: 
    pullPolicy: IfNotPresent

  bucket: 

  resources: {}

postgresql:
  enabled: False

# Cloud SQL proxy configuration
cloudsql:
  # If cloudsql.enabled is true, then
  # Cloud SQL proxy is deployed
  enabled: true

  image:
    repository: gcr.io/cloudsql-docker/gce-proxy
    tag: 1.11

  service:
    annotations: {}
    type: ClusterIP
    externalPort: 5432
    nodePort:
      http:

  # Cloud SQL user name
  user: 
  # Cloud SQL user password
  # Password here must not be base64 encrypted
  password: 
  # Cloud SQL database name
  database: 
  # Cloud SQL GCP project
  # Required if cloudsql.enabled is true
  project: 
  # Cloud SQL GCP region
  # example: europe-west1
  # Required if cloudsql.enabled is true
  region: 
  # Cloud SQL instance name
  # Required if cloudsql.enabled is true
  instance:
  # Cloud SQL instance port number
  # Required if cloudsql.enabled is true
  port: 5432
  # GCP service account key with role roles/cloudsql.client.
  # example: --set serviceAccountKey="$(cat service-account.json | base64 | tr -d '\n')"
  # Required if cloudsql.enabled is true
  serviceAccountKey:

  resources: {}

  nodeSelector: {}

  tolerations: {}

  affinity: {}
